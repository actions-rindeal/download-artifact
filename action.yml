## SPDX-FileCopyrightText: ANNO DOMINI 2024 Jan Chren ~rindeal <dev.rindeal{a}gmail.com>
## SPDX-License-Identifier: GPL-3.0-only
##
## This code is based on https://github.com/actions/download-artifact
## SPDX-License-Identifier: MIT (for actions/download-artifact)

name: 'Download a Build Artifact'
description: 'Download a build artifact that was previously uploaded in the workflow by the upload-artifact action'
author: 'rindeal'

inputs:
  'artifact':
    description: 'Artifact metadata JSON as output by the actions-rindeal/upload-artifact action'
  'name':
    description: 'Name of the artifact to download. If unspecified, all artifacts for the run are downloaded.'
    required: false
  'path':
    description: 'Destination path. Supports basic tilde expansion. Defaults to $GITHUB_WORKSPACE'
    required: false
  'pattern':
    description: 'A glob pattern matching the artifacts that should be downloaded. Ignored if name is specified.'
    required: false
  'merge-multiple':
    description: |-
      When multiple artifacts are matched, this changes the behavior of the destination directories.
      If true, the downloaded artifacts will be in the same directory specified by path.
      If false, the downloaded artifacts will be extracted into individual named directories within the specified path.
    required: false
    default: 'false'
  'github-token':
    description: |-
      The GitHub token used to authenticate with the GitHub API.
      This is required when downloading artifacts from a different repository or from a different workflow run.
      If this is not specified, the action will attempt to download artifacts from the current repository and the current workflow run.
    required: false
  'repository':
    description: |-
      The repository owner and the repository name joined together by "/".
      If github-token is specified, this is the repository that artifacts will be downloaded from.
  'run-id':
    description: |-
      The id of the workflow run where the desired download artifact was uploaded from.
      If github-token is specified, this is the run that artifacts will be downloaded from.

runs:
  using: composite

  steps:
    - name: 'Process inputs'
      id: 'INPUT'
      shell: python
      run: |
        import os, json

        inputs = json.loads(os.environ['INPUTS']); assert isinstance(inputs, dict)
        github = json.loads(os.environ['GH']);     assert isinstance(github, dict)

        if inputs['artifact']:
            artifact = json.loads(inputs['artifact'])
            assert isinstance(artifact, dict)
            if not inputs.get('name') and not inputs.get('pattern'):
                inputs['name'] = artifact['name']
            if not inputs.get('repository'):
                inputs['repository'] = artifact['workflow_run']['repository_full_name']
            if not inputs.get('run-id'):
                inputs['run-id'] = artifact['workflow_run']['id']
            if not inputs.get('repository'):
                inputs['repository'] = github['repository']
        if not inputs.get('run-id'):
            inputs['run-id'] = github['run_id']

        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write('INPUTS' + '=' + json.dumps(inputs))
      env:
        'INPUTS': ${{ toJSON(inputs) }}
        'GH':     ${{ toJSON(github) }}
  
    - name: 'Download artifact'
      id: 'DOWNLOAD'
      uses: actions/download-artifact@v4
      with:
        'name':           ${{ fromJSON(steps['INPUT'].outputs['INPUTS'])['name'] }}
        'path':           ${{ fromJSON(steps['INPUT'].outputs['INPUTS'])['path'] }}
        'pattern':        ${{ fromJSON(steps['INPUT'].outputs['INPUTS'])['pattern'] }}
        'merge-multiple': ${{ fromJSON(steps['INPUT'].outputs['INPUTS'])['merge-multiple'] }}
        'github-token':   ${{ fromJSON(steps['INPUT'].outputs['INPUTS'])['github-token'] }}
        'repository':     ${{ fromJSON(steps['INPUT'].outputs['INPUTS'])['repository'] }}
        'run-id':         ${{ fromJSON(steps['INPUT'].outputs['INPUTS'])['run-id'] }}

    - name: 'Process outputs'
      id: 'OUTPUT'
      shell: python
      run: |
        import os, sys, json, subprocess

        def jq_pprint(val: dict | str) -> None:
            import subprocess, json
            subprocess.run("jq --color-output .".split(), input=val if isinstance(val, str) else json.dumps(val), text=True)

        inputs  = json.loads(os.environ['INPUTS']);  assert isinstance(inputs, dict)
        outputs = json.loads(os.environ['OUTPUTS']); assert isinstance(outputs, dict)

        # TODO: process outputs here

        outputs_json_str = json.dumps(outputs)
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write('OUTPUTS' + '=' + outputs_json_str)
        jq_pprint(outputs_json_str)
      env:
        'INPUTS':  ${{ steps['INPUT'].outputs['INPUTS'] }}
        'OUTPUTS': ${{ toJSON(steps['DOWNLOAD'].outputs) }}

outputs:
  'download-path':
    description: 'Path of artifact download'
    value: ${{ fromJSON(steps['OUTPUT'].outputs['OUTPUTS'])['download-path'] }}
